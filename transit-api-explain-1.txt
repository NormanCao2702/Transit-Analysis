Endpoint 1: Get Transit Routes Near a Location

This endpoint is designed to return information about transit routes that are in the vicinity of a given geographical location.
It's useful for identifying what transit options are available around a specific point,
such as a user's current location or a point of interest.
Key Parameters:
    1) lat and lon: These parameters take latitude and longitude values, respectively,
    defining the center point from which the search for nearby routes is conducted.
    2) max_distance: This optional parameter defines the maximum search radius in meters from the provided location.
    It allows you to narrow or expand the search area for nearby transit routes.
    3) should_update_realtime: This boolean parameter dictates whether the system should provide real-time updates for the routes
    or just return scheduled information. Setting this to true can give users insights into any real-time deviations from
    the schedule, like delays.

Usage:
    + Discovering Transit Options: Ideal for apps or services that aim to inform users about their nearby
    public transportation options, helping with trip planning or exploring an area.
    + Real-time Updates: By setting should_update_realtime to true, you can offer users up-to-date information about the routes,
    enhancing travel planning with real-time insights.

Example Use Case:
+ Suppose you're developing a feature in a travel app that helps users find all available public transit options within
a 1-kilometer radius of their current location.
+ You can use this endpoint by providing the user's current lat and lon, setting max_distance to 1000,
and enabling should_update_realtime to ensure the information reflects the current operational status of the routes.

How to Choose This Endpoint:
    + Initial Discovery: Use this when you need to provide users with an overview of available transit routes around
    a specific location before diving into detailed trip planning or real-time status checks.
    + Real-time Awareness: Opt for this to quickly gauge the real-time operational status of nearby routes,
    especially in applications that require up-to-the-minute information for immediate travel decisions.

Endpoint 2: Get Transit Stops Near a Location

This endpoint focuses on identifying transit stops within a specified radius around a given geographical point.
It's particularly useful for users to discover accessible stops nearby for planning their transit routes.

Key Parameters:

    1) lat and lon: Specify the central geographical point for the search with latitude and longitude values.
    2) max_distance: Defines the search radius from the specified location in meters,
    allowing flexibility in the breadth of the search area.
    3) stop_filter: Allows filtering the types of locations to include in the search,
    based on GTFS location_type and operational considerations:
        + Routable: Only include stops where vehicles stop.
        + EntrancesAndStopsOutsideStations: Include entrances to stations and standalone stops.
        + Entrances: Only station entrances.
        + Any: Include all types of stops.
    4) pickup_dropoff_filter: Further refines the search to stops based on their operational use:
        PickupAllowedOnly: Stops where boarding is allowed.
        DropoffAllowedOnly: Stops where alighting is allowed.
        Everything: No restriction on the operational use of the stops.

Usage:
    + Stop Discovery: Ideal for identifying stops near the user's location, a destination, or any other point of interest.
    + Trip Planning: Provides a foundational step in trip planning by showing where users can start or end their journeys.

Example Use Case:
A user wants to find all nearby bus stops within a 500-meter radius of their current location where they can board.
You could call this endpoint with the user's current lat and lon, set max_distance to 500, use stop_filter as "Routable",
and pickup_dropoff_filter as "PickupAllowedOnly".

How to Choose This Endpoint:

    + Locating Stops for Access or Departure: When your application needs to show users where they can find transit stops near them,
    this endpoint provides the necessary data, including distance and stop details.
    + Refining Search Based on Operational Needs: The ability to filter by stop type and operational use (pickup or dropoff)
    allows for tailored searches that match the user's specific requirements, enhancing the app's utility and user experience.

Endpoint 3: Get Upcoming Departures for All Routes Serving a Stop

This API endpoint is designed to provide upcoming departure times for all routes serving a specific stop.
It's particularly useful for getting a comprehensive view of departure schedules and, optionally,
real-time updates for a given stop.

Key Parameters:

    1) global_stop_id: This is the unique identifier for the stop you're interested in.
    It's essential for specifying which stop's departure information you want to retrieve.
    time: A UNIX timestamp indicating the time for which you want to determine departures.
    If not provided, the current time is used.
    2) remove_cancelled: A boolean option to exclude cancelled departures from the results,
    helping to streamline the information to only include active departures.
    3) should_update_realtime: Dictates whether the system should provide real-time updates alongside the schedule.
    This is crucial for reflecting the most current operational status.

Usage:

    + Real-time Departure Boards: Ideal for applications displaying live departure boards,
    showing users all upcoming departures from a specific stop in real-time.
    + Trip Planning Assistance: Assists users in planning their immediate journey by providing a comprehensive
    list of upcoming departures, including any real-time adjustments.

Responses:

+ The response includes an array of objects for each route serving the stop,
detailing route information (like route_long_name, route_short_name, route_type, route_color, and route_text_color)
and an array of itineraries (departure times and possibly real-time updates).

Example Use Case:

You're developing a feature within a transit app that shows a live board of all upcoming bus and
train departures from a user's selected stop, with real-time updates on delays or cancellations.
By providing the global_stop_id for the user's stop and setting should_update_realtime to true,
you can fetch and display this information.

How to Choose This Endpoint:
    + Comprehensive Departure Information: Use this when you need to show detailed departure schedules from a particular stop,
    especially useful for end-users waiting at the stop or planning to arrive there shortly.
    + Incorporating Real-time Updates: Essential for providing users with the most accurate departure information,
    taking into account any real-time changes that affect the schedule.

Endpoint 4: Plan a Trip from Origin to Destination

This API endpoint facilitates trip planning between an origin and a destination,
offering various options based on the specified criteria, such as modes of transportation, time, and date.
It aligns with the OpenTripPlanner API, ensuring a broad compatibility for integrating multi-modal trip planning functionalities.

Key Parameters:
    1)arriveBy: Specifies whether the trip should be planned with a departure after the given time (false)
    or to arrive by the specified time (true).
    2)date and time: The date and time for the trip's departure or arrival, respectively, must be in UTC.
    3)mode: Allows specifying combinations of transportation modes for the trip, such as TRANSIT, WALK, BICYCLE, etc.,
    and even specific scenarios like using a personal bike for the first leg of the trip and transit for the remainder.
    4)fromPlace and toPlace: The starting (fromPlace) and ending (toPlace) points of the trip, provided as latitude/longitude pairs.
    numItineraries: The maximum number of itineraries to return.
    5) locale: Language preference for the response.
    6) walkReluctance: Adjusts the willingness to walk as part of the trip; higher values reduce the amount of walking.
    7) wheelchair: Specifies if the trip must be wheelchair accessible.
    8) ignoreRealTimeUpdates: If false, incorporates real-time updates into the trip plan, if available.

Usage:

    + Comprehensive Trip Planning: Provides users with detailed options for traveling from one location to another,
    considering various transportation modes and user preferences.
    + Accessibility and User Preferences: Accommodates specific needs such as wheelchair accessibility and preferences
    regarding walking, ensuring the suggested itineraries are practical and comfortable for the user.

Example Use Case:

A user wants to plan a trip from their current location to a destination, preferring to leave after a certain time,
use a combination of biking and transit, and minimize walking. By setting the appropriate parameters,
including fromPlace, toPlace, mode, and walkReluctance, the API can return suitable itineraries that match these criteria.

How to Choose This Endpoint:

    + Multi-Modal Trip Planning: Ideal for applications requiring the capability to suggest travel itineraries
    that integrate different modes of transportation, offering users flexibility and efficiency in their travel plans.
    + Real-Time Adaptability: Utilizes real-time data (if not ignored) to adjust trip plans according to the
    current status of the transit services, enhancing accuracy and reliability.
